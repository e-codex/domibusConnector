// JENKINS JOBFILE for creating a release branch
//
// creates a release: determines release name based on last tag of development branch,
// increments minor number and asks user for release number,
// creates a branch from development with release prefix and pushes it back to the repo
//
//

node {

	println("start release")

		
	stage("checkout") {
		cleanWs()
		sh 'git config --global credential.helper cache'
		sh 'git config --global push.default simple'
		def scm = checkout([$class: 'GitSCM', branches: [[name: 'development']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'IT-NRW GIT Repo', url: 'https://secure.e-codex.eu/gitblit/r/e-CODEX/WP5/connector.git']]])		
	}
	
	stage("determine version number") {
		gitDescribe = sh(returnStdout: true, script: 'git describe').trim();
		println("GIT DESCRIBE IS ${gitDescribe}")
		
		//remove -23-gbdsaed postfix from git describe output, to extract the tag name of the first parent (see git describe documentation)
		def verssplit = gitDescribe.split("-")[-2..-1];
		println("verssplit is ${verssplit}")
		def vers = gitDescribe.replace("-" + verssplit[0] + "-" + verssplit[1], "")
		println("vers is ${vers}") //tag name is in vers
		
		if (vers[0] == 'v') {
			vers = vers.substring(1, vers.length)
		}
		(major, minor, patch) = vers.tokenize(".") //split tag name into versions...
		println("tokenized: ${major}.${minor}.${patch}")
		
		def postfix = ""
		println("patchnr is ${patch}")
		// if - in patch increment last number in patch else increment minor number
		if (patch.contains("-")) {
			def m = patch =~ /(\d+)-([A-Za-z]+)(\d+)?/
			println("m: ${m}")
			def p = m[0][1]
			println("p: ${p}")
			def t = m[0][2]
			println("t: ${t}")

			def ptext = m[0][2]
			def patchnumber = m[0][1]
			def postfixnumber = 0
			if (m[0].size() > 3  && m[0][3] != null) {
				//contains number
				postfixnumber = (m[0][3] as Integer) + 1
			}
			postfix = "${ptext}${postfixnumber}"
			patch = patchnumber + "-" + ptext + postfixnumber
			m = null //
		} else {	
			minor = (minor as Integer) + 1
		}
		 
		
		releaseVersion = "${major}.${minor}.${patch}"
			
		
		def userInput = input(
			id: 'userInput', message: 'Let\'s release?', parameters: [
			[$class: 'TextParameterDefinition', defaultValue: releaseVersion, description: 'New Release Version Suggestion', name: 'rel']
		])
		
		println("user input is ${userInput}")
		
		releaseVersion = userInput
	
	}
	
	stage("create branch") {
	
		sh "git checkout -b release/v${releaseVersion}"
		
		sh "git push -f origin release/v${releaseVersion}"
	}
	
	
	
}