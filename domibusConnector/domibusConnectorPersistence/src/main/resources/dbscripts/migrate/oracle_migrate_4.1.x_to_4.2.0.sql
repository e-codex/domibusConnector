-- *********************************************************************
-- Update Database Script - from domibusConnector 4.1 to 4.2
-- *********************************************************************
-- adds quartz tables
--

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE DROP CONSTRAINT UQ_DOMIBUS_CONNE_EBMS_MESSAGE;
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE DROP CONSTRAINT UQ_DOMIBUS_CONNE_NAT_MESSAGE_;

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE ADD DIRECTION_SOURCE VARCHAR2(20);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE ADD DIRECTION_TARGET VARCHAR2(20);

UPDATE DOMIBUS_CONNECTOR_MESSAGE SET DIRECTION_TARGET='GATEWAY' WHERE DIRECTION = 'NAT_TO_GW' OR DIRECTION='CON_TO_GW';
UPDATE DOMIBUS_CONNECTOR_MESSAGE SET DIRECTION_TARGET='BACKEND' WHERE DIRECTION = 'GW_TO_NAT' OR DIRECTION='CON_TO_NAT';
UPDATE DOMIBUS_CONNECTOR_MESSAGE SET DIRECTION_SOURCE='GATEWAY' WHERE DIRECTION = 'GW_TO_NAT';
UPDATE DOMIBUS_CONNECTOR_MESSAGE SET DIRECTION_SOURCE='BACKEND' WHERE DIRECTION = 'NAT_TO_GW';

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE DROP COLUMN DIRECTION;
--ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE ADD CONSTRAINT UQ_DC_MSG_EBMSID_DIRECTION_TARGET UNIQUE (EBMS_MESSAGE_ID,DIRECTION_TARGET);
--ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE ADD CONSTRAINT UQ_DC_MSG_NATID_DIRECTION_TARGET UNIQUE (BACKEND_MESSAGE_ID,DIRECTION_TARGET);

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE ADD GATEWAY_NAME VARCHAR2(255);

create table DC_LINK_CONFIGURATION (
	ID DECIMAL(10,0) not null,
	CONFIG_NAME VARCHAR2(255) not null constraint UNQ_DC_LINK_CONFIG_NMAE unique,
	LINK_IMPL VARCHAR2(255),
	constraint PK_DC_LINK_CONFIGURATION primary key (ID)
);

create table DC_LINK_CONFIG_PROPERTY
(
	DC_LINK_CONFIGURATION_ID DECIMAL(10,0) not null,
	PROPERTY_NAME VARCHAR2(255) not null,
	PROPERTY_VALUE CLOB,
	constraint PK_DC_LINK_CONFIG_PROPERTY primary key (DC_LINK_CONFIGURATION_ID, PROPERTY_NAME),
	constraint FK_LINKPROPERTY_LINKCONFIG foreign key (DC_LINK_CONFIGURATION_ID) references DC_LINK_CONFIGURATION (ID)
);

 create table DC_MESSAGE_LANE
(
	ID DECIMAL(10,0) not null,
	NAME VARCHAR2(255) not null
		constraint UNQ_DC_MESSAGE_LANE
			unique,
	DESCRIPTION CLOB,
	constraint PK_DC_MESSAGE_LANE_ID
		primary key (ID)
);

create table DC_MESSAGE_LANE_PROPERTY
(
	DC_MESSAGE_LANE_ID DECIMAL(10,0) not null,
	PROPERTY_NAME VARCHAR2(255) not null,
	PROPERTY_VALUE CLOB,
	constraint PK_DC_MESSAGE_LANE_PROPERTY
		primary key (DC_MESSAGE_LANE_ID, PROPERTY_NAME),
	constraint FK_MSGLANEPROPERTY_MSGLANE
		foreign key (DC_MESSAGE_LANE_ID) references DC_MESSAGE_LANE (ID)
);



create table DC_LINK_PARTNER
(
	ID DECIMAL(10,0) not null,
	NAME VARCHAR2(255) not null
		constraint UNQ_LINK_INFO_NAME
			unique,
	DESCRIPTION CLOB,
	ENABLED DECIMAL(1,0),
	LINK_CONFIG_ID DECIMAL(10,0),
	LINK_TYPE VARCHAR2(20),
	LINK_MODE VARCHAR2(20),
	constraint PK_DC_LINK_PARTNER
		primary key (ID),
	constraint FK_LINKINFO_LINKCONFIG
		foreign key (LINK_CONFIG_ID) references DC_LINK_CONFIGURATION (ID)
);

create table DC_LINK_PARTNER_PROPERTY
(
	DC_LINK_PARTNER_ID DECIMAL(10,0) not null,
	PROPERTY_NAME VARCHAR2(255) not null,
	PROPERTY_VALUE CLOB,
	constraint PK_DC_LINK_PARTNER_PROPERTY
		primary key (DC_LINK_PARTNER_ID, PROPERTY_NAME),
	constraint FK_LINKPROPERTY_LINKPARTNER
		foreign key (DC_LINK_PARTNER_ID) references DC_LINK_PARTNER (ID)
);


create table DC_TRANSPORT_STEP
(
	ID DECIMAL(10,0) not null,
	MESSAGE_ID DECIMAL(10,0) not null,
	LINK_PARTNER_NAME VARCHAR2(255) not null,
	ATTEMPT INT not null,
	TRANSPORT_ID VARCHAR2(255),
	TRANSPORT_SYSTEM_MESSAGE_ID VARCHAR2(255),
	REMOTE_MESSAGE_ID VARCHAR2(255),
	CREATED TIMESTAMP,
	constraint PK_DC_TRANSPORT_STEP
		primary key (ID),
	constraint FK_MESSAGESTEP_MESSAGE
		foreign key (MESSAGE_ID) references DOMIBUS_CONNECTOR_MESSAGE (ID)
);

create table DC_TRANSPORT_STEP_STATUS
(
	TRANSPORT_STEP_ID DECIMAL(10,0) not null,
	STATE VARCHAR2(40) not null,
	CREATED TIMESTAMP,
	TEXT CLOB,
	constraint PK_DC_TRANSPORT_STEP_STATUS
		primary key (TRANSPORT_STEP_ID, STATE),
	constraint FK_trst_trstst
		foreign key (TRANSPORT_STEP_ID) references DC_TRANSPORT_STEP (ID)
);

create table DC_MSGCNT_DETSIG
(
    ID DECIMAL(10,0) not null,
    CONTENT DECIMAL(10,0) not null,
    SIGNATURE CLOB,
    SIGNATURE_NAME varchar2(255),
    SIGNATURE_TYPE varchar2(255),
    constraint PK_DETACHED_SIGNATURE
        primary key (ID)
);

alter table DOMIBUS_CONNECTOR_MSG_CONT ADD STORAGE_PROVIDER_NAME VARCHAR2(255);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD STORAGE_REFERENCE_ID VARCHAR2(512);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD DIGEST VARCHAR2(512);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD PAYLOAD_NAME VARCHAR2(512);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD PAYLOAD_IDENTIFIER VARCHAR2(512);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD PAYLOAD_DESCRIPTION CLOB;
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD PAYLOAD_MIMETYPE VARCHAR2(255);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD PAYLOAD_SIZE DECIMAL(10,0);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD DETACHED_SIGNATURE_ID DECIMAL(10,0);
alter table DOMIBUS_CONNECTOR_MSG_CONT ADD DELETED TIMESTAMP;



-- add quartz tables...

CREATE TABLE qrtz_job_details
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
      REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_simple_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED DECIMAL(10,0) NOT NULL,
    CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_cron_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_simprop_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    STR_PROP_1 VARCHAR2(512) NULL,
    STR_PROP_2 VARCHAR2(512) NULL,
    STR_PROP_3 VARCHAR2(512) NULL,
    INT_PROP_1 DECIMAL(10,0) NULL,
    INT_PROP_2 DECIMAL(10,0) NULL,
    LONG_PROP_1 NUMBER(13) NULL,
    LONG_PROP_2 NUMBER(13) NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR2(1) NULL,
    BOOL_PROP_2 VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_blob_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_calendars
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);
CREATE TABLE qrtz_paused_trigger_grps
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_fired_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    SCHED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_NONCONCURRENT VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);
CREATE TABLE qrtz_scheduler_state
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);
CREATE TABLE qrtz_locks
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);

create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);


--
-- Migrate p mode set tables
--
CREATE TABLE DC_PMODE_SET (
    ID DECIMAL(10,0),
    FK_MESSAGE_LANE DECIMAL (10,0),
    CREATED TIMESTAMP,
    DESCRIPTION CLOB,
    ACTIVE DECIMAL(1, 0) DEFAULT 0 NOT NULL,
    CONSTRAINT PK_DC_PMODE_SET PRIMARY KEY (ID)
);

INSERT INTO DC_PMODE_SET (ID, CREATED, DESCRIPTION) VALUES (1, sysdate, 'initial set created by migration script');

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO DROP CONSTRAINT FK_DOMIBUS_CONNECTOR_MESSAGE_1;
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO DROP CONSTRAINT FK_DOMIBUS_CONNECTOR_MESSAGE_2;
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO DROP CONSTRAINT FK_DOMIBUS_CONNECTOR_MESSAGE_3;
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO DROP CONSTRAINT FK_DOMIBUS_CONNECTOR_MESSAGE_4;

ALTER TABLE DOMIBUS_CONNECTOR_BACK_2_S DROP CONSTRAINT FK_DOMIBUS_CONN_DOMIBUS_CON_02;



-- create technical key

ALTER TABLE DOMIBUS_CONNECTOR_PARTY ADD IDENTIFIER VARCHAR2(255);

CREATE SEQUENCE temp_seq start with 1;
ALTER TABLE DOMIBUS_CONNECTOR_PARTY ADD FK_PMODE_SET DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_PARTY ADD ID DECIMAL(10, 0);
UPDATE DOMIBUS_CONNECTOR_PARTY SET ID=temp_seq.NEXTVAL;
ALTER TABLE DOMIBUS_CONNECTOR_PARTY MODIFY ID NOT NULL ENABLE;
ALTER TABLE DOMIBUS_CONNECTOR_PARTY DROP PRIMARY KEY;
ALTER TABLE DOMIBUS_CONNECTOR_PARTY ADD CONSTRAINT PK_DOMIBUS_CONNECTOR_PARTY_ PRIMARY KEY (ID);
ALTER TABLE DOMIBUS_CONNECTOR_PARTY ADD CONSTRAINT FK_PARTY_PMODE_SET_ID FOREIGN KEY (FK_PMODE_SET) REFERENCES DC_PMODE_SET(ID);
DROP SEQUENCE temp_seq;

CREATE SEQUENCE temp_seq start with 1;
ALTER TABLE DOMIBUS_CONNECTOR_ACTION ADD FK_PMODE_SET DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_ACTION ADD ID DECIMAL(10, 0);
UPDATE DOMIBUS_CONNECTOR_ACTION SET ID=temp_seq.NEXTVAL;
ALTER TABLE DOMIBUS_CONNECTOR_ACTION MODIFY ID NOT NULL ENABLE;
ALTER TABLE DOMIBUS_CONNECTOR_ACTION DROP PRIMARY KEY;
ALTER TABLE DOMIBUS_CONNECTOR_ACTION ADD CONSTRAINT PK_DOMIBUS_CONNECTOR_ACTION_ PRIMARY KEY (ID);
ALTER TABLE DOMIBUS_CONNECTOR_ACTION ADD CONSTRAINT FK_ACTION_PMODE_SET_ID FOREIGN KEY (FK_PMODE_SET) REFERENCES DC_PMODE_SET(ID);
DROP SEQUENCE temp_seq;

CREATE SEQUENCE temp_seq start with 1;
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE ADD FK_PMODE_SET DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE ADD ID DECIMAL(10, 0);
UPDATE DOMIBUS_CONNECTOR_SERVICE SET ID=temp_seq.NEXTVAL;
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE MODIFY ID NOT NULL ENABLE;
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE DROP PRIMARY KEY;
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE ADD CONSTRAINT PK_DOMIBUS_CONNECTOR_SERVICE_ PRIMARY KEY (ID);
ALTER TABLE DOMIBUS_CONNECTOR_SERVICE ADD CONSTRAINT FK_SERVICE_PMODE_SET_ID FOREIGN KEY (FK_PMODE_SET) REFERENCES DC_PMODE_SET(ID);
DROP SEQUENCE temp_seq;

CREATE SEQUENCE temp_seq start with 1;
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD FK_TO_PARTY_ID DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD FK_FROM_PARTY_ID DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD FK_ACTION DECIMAL(10,0);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD FK_SERVICE DECIMAL(10,0);
DROP SEQUENCE temp_seq;

UPDATE DOMIBUS_CONNECTOR_MESSAGE_INFO info
            SET info.FK_TO_PARTY_ID = (SELECT party.id FROM DOMIBUS_CONNECTOR_PARTY party WHERE info.TO_PARTY_ID = party.PARTY_ID AND info.TO_PARTY_ROLE = party.ROLE)
            WHERE exists (SELECT * FROM DOMIBUS_CONNECTOR_PARTY party WHERE info.TO_PARTY_ID = party.PARTY_ID AND info.TO_PARTY_ROLE = party.ROLE);

UPDATE DOMIBUS_CONNECTOR_MESSAGE_INFO info
            SET info.FK_FROM_PARTY_ID = (SELECT party.id FROM DOMIBUS_CONNECTOR_PARTY party WHERE info.FROM_PARTY_ID = party.PARTY_ID AND info.FROM_PARTY_ROLE = party.ROLE)
            WHERE exists (SELECT * FROM DOMIBUS_CONNECTOR_PARTY party WHERE info.FROM_PARTY_ID = party.PARTY_ID AND info.FROM_PARTY_ROLE = party.ROLE);

UPDATE DOMIBUS_CONNECTOR_MESSAGE_INFO info
            SET info.FK_ACTION = (SELECT action.id FROM DOMIBUS_CONNECTOR_ACTION action WHERE info.ACTION = action.ACTION )
            WHERE exists (SELECT * FROM DOMIBUS_CONNECTOR_ACTION action WHERE info.ACTION = action.ACTION );

UPDATE DOMIBUS_CONNECTOR_MESSAGE_INFO info
            SET info.FK_SERVICE = (SELECT service.id FROM DOMIBUS_CONNECTOR_SERVICE service WHERE info.SERVICE = service.SERVICE )
            WHERE exists (SELECT service.id FROM DOMIBUS_CONNECTOR_SERVICE service WHERE info.SERVICE = service.SERVICE );

ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD CONSTRAINT FK_MSGINFO_FROM_PARTY FOREIGN KEY (FK_FROM_PARTY_ID) REFERENCES DOMIBUS_CONNECTOR_PARTY(ID);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD CONSTRAINT FK_MSGINFO_TO_PARTY FOREIGN KEY (FK_TO_PARTY_ID) REFERENCES DOMIBUS_CONNECTOR_PARTY(ID);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD CONSTRAINT FK_MSGINFO_SERVICE FOREIGN KEY (FK_SERVICE) REFERENCES DOMIBUS_CONNECTOR_SERVICE(ID);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO ADD CONSTRAINT FK_MSGINFO_ACTION FOREIGN KEY (FK_ACTION) REFERENCES DOMIBUS_CONNECTOR_ACTION(ID);


ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO MODIFY ORIGINAL_SENDER VARCHAR2(2048);
ALTER TABLE DOMIBUS_CONNECTOR_MESSAGE_INFO MODIFY FINAL_RECIPIENT VARCHAR2(2048);

-- create this table if not exists already!
-- CREATE TABLE DC_DB_VERSION (TAG VARCHAR(255) PRIMARY KEY);
INSERT INTO DC_DB_VERSION (TAG) VALUES ('V4.2');
