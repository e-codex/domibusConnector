## CONNECTOR PROPERTIES
##
## This file contains the connector configuration properties
## Properties marked with !! must be changed according to your setup/environment!
##




############################ GATEWAY LINK ###################################

# defines the endpoint address of the gateway webservice, the gateway name and role.
# The connector is using this webservice address to submit messages to the gateway
gateway.endpoint.address=!!CHANGE ME!! example: http://GW:8080/domibus/services/domibusConnectorSubmissionWebservice

#used for generating the evidences:
gateway.name=!!CHANGEME!!	
gateway.role=GW



######
# CONNECTOR EVIDENCES TOOLKIT PROPERTIES
######

# defines the timeout for RelayREMMD evidence to be sent back when an outgoing message was sent.
# After this period, if an outgoing message was sent to the gateway successfully and no RelayREMMD evidence was received,
# a RelayREMMDRejection will be created for this evidence an sent back to the national system.
# Value can be in hours (1h) or minutes (1m) or seconds (1s) or milliseconds (1ms)

# boolean value to turn on/off the check if evidences for outgoing messages have been received yet.
connector.controller.evidence.timeoutActive=false
connector.controller.evidence.checkTimeout=1h
connector.controller.evidence.relayREMMDTimeout=24h
connector.controller.evidence.DeliveryTimeout=24h
connector.controller.evidence.RetrievalTimeout=24h


# To be able to sign evidences a keystore with certificate and private key integrated must be used. Here are the
# credentials to set.
connector.evidences.keystore.path=!!CHANGEME!!
# if the keystore is password protected enter the password here:
connector.evidences.keystore.password=!!CHANGEME!!
# if the
connector.evidences.key.alias=!!CHANGEME!!
connector.evidences.key.password=!!CHANGEME!!


# Address data for the generating of the evidences.
postal.address.street=!!Street
postal.address.locality=!!locality	
postal.address.postal.code=!!zipcode
postal.address.country=!!AT



#############################  backend store  #############################
#defines the location of the backend keyStore:
connector.backend.ws.key.store.path=!!CHANGEME!!
#defines the key store password:
connector.backend.ws.key.store.password=12345
#defines the key alias for the key which is used to sign the messages:
connector.backend.ws.key.key.alias=connector
#defines the key password:
connector.backend.ws.key.key.password=

#





#####
##### SECURITY TOOLKIT/LIBRARY RELATED CONFIGURATION

# To be able to sign the secure contents of the message, a keystore with certificate and private key integrated must be used. Here are the
# credentials to set.
connector.security.keystore.path=!!CHANGEME!!
connector.security.keystore.password=!!CHANGEME!!
connector.security.key.alias=!!CHANGEME!!
connector.security.key.password=!!CHANGEME!!

#connector.security.toolkit.implementation.class.name=

# Settings for the security library for generating the Token.
token.issuer.country=!!CHANGEME!!
token.issuer.service.provider=!!CHANGEME!!
# This can rather be SIGNATURE_BASED, then the main document needs to be signed, or AUTHENTICATION_BASED, in that case the security interface needs
# to be implemented (see connector.security.toolkit.implementation.class.name)
token.issuer.aes.value=!!CHANGEME!! 






# A keystore with trusted, public certificates the security library checks received ASiC-S containers and "Trust Ok"-Tokens against.
# If this property is set, signatures with certificates not being listed within the truststore will create an exception at the time of container/token-validation
# Do not set this properties to disable the check against a trusted certificate store.
#file:/unittest_truststore.jks


# The connectors security lib is loading trusted lists over
# the network:

security.lotl.scheme.uri=https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl.html
security.lotl.url=https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml
security.oj.url=http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=uriserv:OJ.C_.2016.233.01.0001.01.ENG

# If the connector should use a http proxy for loading the trusted lists  you have to configure
# the proxy values here:
#
#HTTP proxy settings
http.proxy.enabled=true
http.proxy.host=172.30.9.12
http.proxy.port=8080
http.proxy.user=
http.proxy.password=

#HTTPS proxy settings
https.proxy.enabled=true
https.proxy.host=172.30.9.12
https.proxy.port=8080
https.proxy.user=
https.proxy.password=



connector.test.service=
connector.test.action=




#######
## LOGGING
#######
#
#
# Location of the logging log4j2 configuration file:
# if you are using a complex custom logging configuration you can enter a
# path to your log4j2 logging configuratoin here:
logging.config=file:C:\\Entwicklung\\domibus\\config





#########
## DATASOURCE
# you can just define a spring datasource here or use datasource provided by the container
#
#########
# Hint: Don't forget to add your jdbc driver jar to your tomcat classpath!
#container defined datasource name:
# JNDI location of the datasource. Class, url, username & password are ignored when set!
spring.datasource.jndi-name=domibusWebConnectorDS

## OR in application defined datasource:
##
## Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
#spring.datasource.driver-class-name=
## Login username of the database.
#spring.datasource.username=
## JDBC URL of the database.
#spring.datasource.url=
## Login password of the database.
#spring.datasource.password=

########
## DATASOURCE EXPERTs CONFIGURATION:
####
## If you want to use your custom connection pooling, you can define it here:
# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
#spring.datasource.type=
#
#spring.datasource.hikari.*= # Hikari specific settings
## If you want to customize the tomcat datasource
# Tomcat datasource specific settings
#spring.datasource.tomcat.*=




