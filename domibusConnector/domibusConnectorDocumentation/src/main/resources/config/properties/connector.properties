## CONNECTOR PROPERTIES
##
## This file contains the connector configuration properties
## Properties marked with !! must be changed according to your setup/environment!
##
##############################################################################
############################ INTRODUCTION      ###############################
##############################################################################
# This properties are spring styled properties
#   https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties
#
# * Most of the properties are validated during startup so misconfiguration should result to a non starting connector (this should
#    reduce the need of looking for runtime errors)
# * The following notation is equavelent: timeoutActive and timeout-active the minus or uppercase is only used for formatting!
# * This example properties are currently edited by hand and not covered by any integration test so if you find a mistake please inform us!
#


##############################################################################
############################ MONITOR PROPERTIES###############################
##############################################################################
# see: https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html
#
management.endpoints.web.exposure.include=info,health,metrics,configprops



#############################################################################
############################ CUSTOM PROPERTIES###############################
#############################################################################

#disable jmx to avoid conflicts with other deployed software...
#...or enable it and use it for monitoring db-connections, connector internal jms-queues, ...
spring.datasource.jmx-enabled=false
spring.jmx.enabled=false


#############################################################################
############################ PROFILES     ###################################
#############################################################################
# defines the by the spring application loaded profiles
#

# BigData Storage profiles:
# storage-db activates the bigFileStorage into database
# storage-fs activates the filesystemStorage
#
# NOTE: only one storage profile at once can be active!
#

# Gw Connection Profiles:
# gwlink-ws activates the GatewayLink communication over webservices
# gwlink-jms activates features for using jms queues to communicate to the gw !!NOT IMPLEMENTED YET!!
#

# Backend Connection Profiles:
# backendlink-ws activates the backend communication over webservices
# backendlink-jms activates features for using jms queues to backend to the backend clients !!NOT IMPLEMENTED YET!!
#

#this example stores the data into db connects over webservices to gw and backends
#spring.profiles.active=storage-db,gwlink-ws,backendlink-ws
#this example stores into filesystem connects over webservices to gw and backends
spring.profiles.active=storage-fs,gwlink-ws,backendlink-ws


#############################################################################
############################ BACKEND LINK ###################################
#############################################################################
# Everything within this keystore is completly in the internal domain
# so here no rules apply to the certificates used here
#

#defines the location of the backend keyStore:
connector.backend.ws.key.key-store.path=file:${TOMCAT_ROOT}/conf/connector/keystores/backend.jks
#defines the privateKey store password:
connector.backend.ws.key.key-store.password=12345
#defines the privateKey alias for the privateKey which is used to sign the messages:
connector.backend.ws.key.private-key.alias=connector
#defines the privateKey password:
connector.backend.ws.key.private-key.password=12345

connector.backend.ws.trust.trust-store.path=file:${TOMCAT_ROOT}/conf/connector/keystores/backend.jks
connector.backend.ws.trust.trust-store.password=12345

#############################################################################
############################ GATEWAY LINK ###################################
#############################################################################

# defines the endpoint address of the gateway webservice, the gateway name and role.

# The connector is using this webservice address to submit messages to the gateway
#connector.gatewaylink.ws.submissionEndpointAddress=!!CHANGE ME!!
example: http://GW:8080/domibus/services/domibusConnectorSubmissionWebservice

#############################  conn - gw keystore  #############################

connector.gatewaylink.ws.key-store.path=file:${TOMCAT_ROOT}/conf/connector/keystores/gwlink_connector.jks
connector.gatewaylink.ws.key-store.password=12345
connector.gatewaylink.ws.private-key.alias=connector
connector.gatewaylink.ws.private-key.password=12345

connector.gatewaylink.ws.trust-store.path=file:${TOMCAT_ROOT}/conf/connector/keystores/gwlink_connector.jks
connector.gatewaylink.ws.trust-store.password=12345
connector.gatewaylink.ws.encrypt-alias=gw

connector.gatewaylink.ws.ws-policy=file:///node0/products/execconp/web/tomcat_execconp/conf/connector/no-security.policy.xml

#connector.gatewaylink.ws.

################################################################################
############################ CONNECTOR-TESTS ###################################
################################################################################

# Service and action entered here according to the p-modes used.
# Enabled and used messages received with that combination will not be sent to the backend of the connector,
# but will be answered with evidences after processed in the connector.
connector.test.service=Connector-TEST
connector.test.action=ConTest_Form

##################################################################################
############################ EVIDENCES TOOLKIT ###################################
##################################################################################


# All timeout values apply the following rules:
# -- Set to 0, they will be ignored
# -- After a message is rejected, also a positive received evidence afterwards does not change the status.
# -- All values can be defined as h hours, m minutes, s seconds, ms milliseconds

# boolean value to turn on/off the check if evidences for outgoing messages have been received yet.
connector.controller.evidence.timeoutActive=true
# How often should the timeout of an evidence be checked
# The default is every hour the messages are checked for timed out evidences
connector.controller.evidence.checkTimeout=1h
# After this period, if an outgoing message was sent to the gateway successfully and no RelayREMMD evidence was received,
# a RelayREMMDRejection will be created for this evidence an sent back to the national system.
connector.controller.evidence.relayREMMDTimeout=24h
# After this period, if an outgoing message was sent to the gateway successfully and no Delivery/Non-Delivery evidence was received,
# a Non-Delivery will be created for this evidence an sent back to the national system.
connector.controller.evidence.deliveryTimeout=24h
# After this period, if an outgoing message was sent to the gateway successfully and no Retrieval/Non-Retrieval evidence was received,
# a Non-Retrieval will be created for this evidence an sent back to the national system.
connector.controller.evidence.retrievalTimeout=24h


#
# Timer for checking content removal
#  every 5 minutes the connector will check if it can remove any stored message content
#  content can be removed if the message has been process either to ACCEPTED or REJECTED
#
connector.controller.content.check-timeout=5m



##################################################################################
############################ EVIDENCES VARIABLES #################################
##################################################################################
# The following variables are put into the generated ETSI-REM evidences to make it clear
# who has generated this evidences. The Following properties do not have any
# technical implications yet. Though they must be filled but the data is not checked.
# The information is written 1:1 into the generated evidence
#


# This property should show the EXTERNAL address where the gateway can be reached. Should match the address published with the pmodes.
gateway.endpoint.address=!!CHANGE ME!! 
# example: http://GW:8080/domibus/services/domibusConnectorSubmissionWebservice


#This is the name of your Gateway. This should match the PartyID within the pmodes.
gateway.name=!!CHANGEME!!
#example: gateway.name=AT

# Address data for the generating of the evidences.
postal.address.street=!!CHANGEME!!
postal.address.locality=!!CHANGEME!!
postal.address.postal.code=!!CHANGEME!!
postal.address.country=!!CHANGEME!!
# EXAMPLE:
#postal.address.street=Hintere Zollamtsstrasse 3
#postal.address.locality=Wien
#postal.address.postal.code=1030
#postal.address.country=AT


##################################################################################
############################ SECURITY TOOLKIT ####################################
##################################################################################

# Settings for the security library for generating the Token.
token.issuer.country=AT
token.issuer.service.provider=BRZ
# This can rather be
# SIGNATURE_BASED, then the main document needs to be signed, the signature is checked by the connector. The trustworthy certificates must be part of the
# connector.security.trust-store (future connector versions may use a different trust-store for that purpose, since this trust store is already used for
# check trust of ecodex messages)
# AUTHENTICATION_BASED => the by the authenticated backend received message is trustworthy and will be transported further on, no certificates will be checked
#
#token.issuer.aes.value=SIGNATURE_BASED
token.issuer.aes.value=AUTHENTICATION_BASED

# The connectors security lib is loading lists of trusted lists (lotl) over
# the network. This lists are currently not used but the underlying library requires that step
# anyway if the lists cannot be loaded this will lead only to ugly warnings during connector startup
#

security.lotl.scheme.uri=https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl.html
security.lotl.url=https://ec.europa.eu/information_society/policy/esignature/trusted-list/tl-mp.xml
security.oj.url=http://eur-lex.europa.eu/legal-content/EN/TXT/?uri=uriserv:OJ.C_.2016.233.01.0001.01.ENG


##################################################################################
############################ KEYSTORES/TRUSTSTORES ###############################
##################################################################################




#############################  evidences keystore  #############################
# To be able to sign evidences a keystore with certificate and private privateKey integrated must be used. Here are the
# credentials to set.
# Usually this certificate is the same as it is used to sign the evidences: connector.security.keystore

connector.evidences.keystore.path=file:${TOMCAT_ROOT}/conf/connector/keystores/connector_keystore.jks
connector.evidences.keystore.password=12345

# The certificate of this key has to be shared with your partners!
# So make sure that any CRL, OCSP, ... checks required by this certificate can be resolved from the outside world!
#
connector.evidences.privateKey.alias=service_at
connector.evidences.privateKey.password=12345


#############################  ASIC-S keystore  #############################
# To be able to sign the secure contents of the message, a keystore with certificate and private privateKey integrated must be used. Here are the
# credentials to set.
# Usually this certificate is the same as it is used to sign the trustToken, ASIC-S: connector.evidences.keystore

connector.security.keystore.path=file:${TOMCAT_ROOT}/conf/connector/keystores/connector_keystore.jks
connector.security.keystore.password=execp

# The certificate of this key has to be shared with your partners!
# So make sure that any CRL, OCSP, ... checks required by this certificate can be resolved from the outside world!
#
connector.security.private-key.alias=service_at
connector.security.private-key.password=12345

#############################  connector truststore  #############################
# Holds all public keys of partners to validate the received ASIC-S containers against. Also contains public keys of signatures,
# if documents to be sent are signed (SIGNATURE_BASED).

connector.security.trust-store.path=file:${TOMCAT_ROOT}/conf/connector/keystores/trusted_connectors.jks
connector.security.trust-store.password=changeit


############################# connector ojstore ###################################
# DEPRECATED will be removed in future versions
#
connector.security.oj-store.path=classpath:/keys/ojStore.jks
connector.security.oj-store.password=ecodex

##################################################################################
############################ PROXY CONFIGURATION #################################
##################################################################################

# If the connector should use a http proxy for loading the trusted lists  you have to configure
# the proxy values here:
#
#HTTP proxy settings
http.proxy.enabled=false
http.proxy.host=
http.proxy.port=
http.proxy.user=
http.proxy.password=

#HTTPS proxy settings
https.proxy.enabled=false
https.proxy.host=
https.proxy.port=
https.proxy.user=
https.proxy.password=



##################################################################################
############################ DATASOURCE CONFIGURATION ############################
##################################################################################

# You can just define a spring datasource here or use datasource provided by the container
# Hint: Don't forget to add your jdbc driver jar to your web containers classpath!

# Container defined datasource name:

# JNDI location of the datasource. Class, url, username & password are ignored when set!
#spring.datasource.jndi-name=domibusWebConnectorDS

###### OR ######

# Application defined datasource:

# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.driver-class-name=!!CHANGEME!!
#spring.datasource.driver-class-name=org.h2.Driver
# Login username of the database.
spring.datasource.username=!!CHANGEME!!
# JDBC URL of the database.
spring.datasource.url=!!CHANGEME!!
#spring.datasource.url=jdbc:h2:/node0/products/execconq/web/tomcat_execconq/temp/connector/database/connectorh2db
# Login password of the database...
spring.datasource.password=!!CHANGEME!!

##################################################################################
############################ DATABASE INITIALISATION  ############################
##################################################################################
# The connector comes with liquibase wich makes it possible to create the by
# the connector required tables on the fly during startup or you or you
# can disable that and use the provided database scripts
#
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:/db/changelog/install.xml

##################################################################################
############################ BOOTSTRAP  CONFIGURATION ############################
##################################################################################
# The bootstrap configuration makes it possible for the connector to load almost
# all properties from the database. For this purpose the connector needs to know which
# database and where it is reachable
#
# To allow editing the properites over the UI this datasource must be the same
# as for the connector: spring.datasource.*
#
# ATTENTION: From the database loaded properties will take precedence over properties
# loaded from file
#
#
bootstrap.database.property-loading.enabled=true
#
# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
# eg. Oracle: oracle.jdbc.OracleDriver
bootstrap.datasource.driver-class-name=!!CHANGEME!!

# JDBC URL of the database.
bootstrap.datasource.url=!!CHANGEME!!

# Login username of the database.
bootstrap.datasource.username=!!CHANGEME!!

# Login password of the database.
bootstrap.datasource.password=!!CHANGEME!!


##################################################################################
############################ FILESYSTEM STORAGE CONFIGURATION ####################
##################################################################################

# activate the storage-fs profile and make sure that it is the only activated storage profile!
#
#file:///node0/products/execconq/web/tomcat_execconq/temp/connector/fsstorage2/
connector.persistence.filesystem.storagePath=file:${TOMCAT_ROOT}/work/store/fsstorage
#should the directory created recursivly if it does not exists?
connector.persistence.filesystem.createDir=true
#
#EXPERIMENTAL
#should the content of the files be aes encrypted with an random key? key is stored into the database
connector.persistence.filesystem.encryptionActive=false

##################################################################################
############################ QUEUE NAMES           ###############################
##################################################################################
connector.backend.internal.wait-queue.name=EU.EXEC.BLUE.CONNECTOR.BACKENDWAITQEUE
domibus.connector.internal.gateway.to.controller.queue=EU.EXEC.BLUE.CONNECTOR.GATEWAYTOCONTROLLERQUEUE
domibus.connector.internal.backend.to.controller.queue=EU.EXEC.BLUE.CONNECTOR.BACKENDTOCONTROLLERQUEUE

##################################################################################
############################ QUEUE SERVER          ###############################
##################################################################################
# connector uses internally JMS queues if no external JMS service is configured
# internally activemq is being started by spring boot
#
# To run multiple connectors at same time it is mandatory that every connector has access to the same
#  Queuing System
#  Filesystem
#  Database
#
# For detail information about configuring an external JMS service consult the spring boot documentation
#
#
# activemq external broker:
#spring.activemq.broker-url=

# configuring external tibco jms example:
# configuring tibco with spring-boot-tibco-autoconfigure
# TIPCO (needs addtional tipco libs and tipco autoconfig within classpath)
# tibco autoconfig is available within the nexus repo: https://secure.e-codex.eu/nexus/content/groups/public/eu/ecodex/spring/tipco/spring-boot-autoconfigure-tipco/
#spring.tipco.jms.enabled=false
#spring.tipco.jms.brokerUrl=tibcoaixs.justiz.cal.local:37222




##################################################################################
############################ LOGGING CONFIGURATION ###############################
##################################################################################
# Connector uses log4j2 project for logging
#  The project provides a lot of configuration possibilities
#  The with the project delivered log4j2.xml should be a reasonable default, anyway if you
#  use centraliced logging eg. you may consult the log4j2 project page in detail:
#    https://logging.apache.org/log4j/2.x/project-summary.html
#
#logging.config=file:///node0/products/execconq/web/tomcat_execconq/conf/connector/log4j.properties


