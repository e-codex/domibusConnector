
ifndef::basepath[]
:basepath: ../../../../
endif::basepath[]

ifndef::header[]
include::{basepath}/doc/header.adoc[]
endif::header[]

= Receive Message from Gateway

This is an abstract process with two extensions.
The used extension depends on the message type received.

== UML diagram

The daigram for this process is defined within the extensions.

== Process-Steps

|===
| step | description | parameters | returns | on success | on fail | module responsibility

|Find Domain
|ABSTRACT - defined in extension
|DomibusConnectorMessageType transitionMessage
|DcDomain identifiedDomain
|Map to BusinessModel
|ABSTRACT - defined in extension
|Controller

|Map to BusinessModel
|mapping the transition model to the business model
a|* DomibusConnectorMessageType transitionMessage
* DcDomain identifiedDomain
|DomibusConnectorMessage businessModelMessage
|Persist message
|ABSTRACT - defined in extension
|Controller

|Persist message
a|* DC_MESSAGE
* DC_EBMS_ROUTE
* DC_MSG_CONTENT (without storage refs)
* DC_MSG_PROCESS_STEP all steps to this process. Already handled steps with result.
|DomibusConnectorMessage businessModelMessage
|DomibusConnectorMessage businessModelMessage
|Write to storage
|ABSTRACT - defined in extension
|Controller

|Write to storage
|Write content: message content files are received from CXF and put on storage.
DC_MSG_CONTENT update with storage references.
DC_MSG_PROCESS_STEP update with result.
|DomibusConnectorMessage businessModelMessage
|DomibusConnectorMessage businessModelMessage
|Put on queue
|ABSTRACT - defined in extension
|Controller

|Put on queue
|The message is put on the queue for business processing.

DC_MSG_PROCESS_STEP update with result.
|DomibusConnectorMessage businessModelMessage
|result
|acknowledge Request
|prepare for retry
|Controller

|prepare for retry
|Message is prepared for retry. â†’ new process!
|DomibusConnectorMessage businessModelMessage
|result
|acknowledge Request
|cleanUp
|Controller

|cleanUp
|Persisted message data and storage contents are deleted.
|DomibusConnectorMessage businessModelMessage
|result
|acknowledge Request
|Exception
|Controller

|acknowledge request
|The gateway request is answered with an ACK.
|result
|
|End Process
|Exception
|Link

|Exception
|A typed exception is thrown back to webservice.
|exception message
|
|End Process
|
|Link

|===

== Extensions

=== Receive Business Message from Gateway

==== UML diagram

[plantuml,receive_BM_from_gateway,format=svg]
----
@startuml

top to bottom direction
skinparam monochrome false
skinparam linetype ortho
skinparam componentStyle uml2

[FindDomain]
[MapToBusinessModel]
[PersistMessage]
[WriteToStorage]
[PutOnQueue]
[PrepareForRetry]
[CleanUp]
[AcknowledgeRequest]

[Create and send RELAY_REMMD_REJECTION]


queue toConnectorQueue
queue retryQueue

database connectorDatabase

node Storage

StartProcess --> FindDomain
FindDomain --> [MapToBusinessModel] : onSuccess
FindDomain --> [Create and send RELAY_REMMD_REJECTION] : onFail
[MapToBusinessModel] --> [PersistMessage] : onSuccess
[MapToBusinessModel] --> [Create and send RELAY_REMMD_REJECTION] : onFail
[PersistMessage] --> [WriteToStorage] : onSuccess
[PersistMessage] --> connectorDatabase : persistTo
[PersistMessage] --> [Create and send RELAY_REMMD_REJECTION] : onFail
[WriteToStorage] --> Storage : writeTo
[WriteToStorage] --> connectorDatabase : update
[WriteToStorage] --> [PutOnQueue] : onSuccess
[PutOnQueue] --> toConnectorQueue
[PutOnQueue] --> [PrepareForRetry] : onFail
[PutOnQueue] --> [AcknowledgeRequest] : onSuccess
[PrepareForRetry] --> retryQueue
[PrepareForRetry] --> [AcknowledgeRequest] : onSuccess
[PrepareForRetry] --> [CleanUp] : onFail
[CleanUp] --> [AcknowledgeRequest] : onSuccess
[CleanUp] --> Exception : onFail
[Create and send RELAY_REMMD_REJECTION] --> [CleanUp]



@enduml
----

==== Process-Steps

|===
| step | description | parameters | returns | on success | on fail | module responsibility

|Find Domain
a|
* Is there a referenced message?
* Are there messages for this conversation already?
* in case of multi-tenancy: which domain is sent by the gateway?
* default domain.
|inherited
|inherited
|inherited
|Create and send RELAY_REMMD_REJECTION
|inherited

|Map to BusinessModel
|inherited
|inherited
|inherited
|inherited
|Create and send RELAY_REMMD_REJECTION
|inherited

|Persist MSG
|inherited
|inherited
|inherited
|inherited
|Create and send RELAY_REMMD_REJECTION
|inherited

|Write to Storage
|inherited
|inherited
|inherited
|inherited
|Create and send RELAY_REMMD_REJECTION
|inherited

|Create and send RELAY_REMMD_REJECTION
|If possible, create RELAY_REMMD_REJECTION and send it as new WS message to gateway.
This is not treated as connector message!
|DomibusConnectorMessage
|result
|cleanUp
|cleanUp
|Controller
|===

=== Receive Confirmation Message from Gateway

==== UML diagram

[plantuml,receive_CM_from_gateway,format=svg]
----
@startuml

top to bottom direction
skinparam monochrome false
skinparam linetype ortho
skinparam componentStyle uml2

[FindDomain]
[MapToBusinessModel]
[PersistMessage]
[WriteToStorage]
[PutOnQueue]
[PrepareForRetry]
[CleanUp]
[AcknowledgeRequest]


queue toConnectorQueue
queue retryQueue

database connectorDatabase

node Storage

StartProcess --> FindDomain
FindDomain --> [MapToBusinessModel] : onSuccess
[FindDomain] --> [AcknowledgeRequest] : onFail
[MapToBusinessModel] --> [PersistMessage] : onSuccess
[MapToBusinessModel] --> [AcknowledgeRequest] : onFail
[PersistMessage] --> [WriteToStorage] : onSuccess
[PersistMessage] --> connectorDatabase : persistTo
[PersistMessage] --> [AcknowledgeRequest] : onFail
[WriteToStorage] --> Storage : writeTo
[WriteToStorage] --> connectorDatabase : update
[WriteToStorage] --> [PutOnQueue] : onSuccess
[PutOnQueue] --> toConnectorQueue
[PutOnQueue] --> [PrepareForRetry] : onFail
[PutOnQueue] --> [AcknowledgeRequest] : onSuccess
[PrepareForRetry] --> retryQueue
[PrepareForRetry] --> [AcknowledgeRequest] : onSuccess
[PrepareForRetry] --> [CleanUp] : onFail
[CleanUp] --> [AcknowledgeRequest] : onSuccess
[CleanUp] --> Exception : onFail



@enduml
----

==== Process-Steps
|===
| step | description | parameters | returns | on success | on fail | module responsibility

|Find Domain
|Find original business message by refToMessageId and return domain of it.
|inherited
|inherited
|inherited
|acknowledge Request
|inherited

|Map to BusinessModel
|inherited
|inherited
|inherited
|inherited
|acknowledge Request
|inherited

|Persist MSG
|inherited
|inherited
|inherited
|inherited
|acknowledge Request
|inherited

|Write to Storage
|inherited
|inherited
|inherited
|inherited
|acknowledge Request
|inherited
|===