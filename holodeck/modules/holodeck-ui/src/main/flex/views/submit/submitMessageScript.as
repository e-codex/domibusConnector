// ActionScript file behind SubmitMessage.mxml:import views.submit.FromParty;import views.submit.MessageProperties;import views.submit.SelectPayload;import views.Effects; import mx.controls.Alert;import mx.effects.SoundEffect;import mx.collections.ArrayCollection;import flash.events.*;import mx.events.CollectionEvent;import flash.net.URLRequest;import flash.net.URLVariables;import mx.core.*;import mx.utils.UIDUtil;import org.holodeck.ebms3.submit.*;import mx.rpc.events.ResultEvent;import views.submit.PayloadInfo;/*  		[Bindable] public var fromParty:FromParty = new FromParty();[Bindable] public var messageProperties:MessageProperties =                                           new MessageProperties();[Bindable] public var uploadPanel:SelectPayload = new SelectPayload();[Bindable] public var payloadInfo:PayloadInfo = new PayloadInfo();*//** * The name of the directory where uploaded files will be placed: */ [Bindable] public var directory:String;public var snd:SoundAsset = new Effects.sound10() as SoundAsset;        private var _uploadURL:URLRequest;//config varsprivate var _variables:URLVariables;public function clear():void{  _agreementRef.text = null;  _conversationId.text = null;  _refToMessageId.text = null;  if (fromParty != null) fromParty.clear();  if (messageProperties != null) messageProperties.clear();  if (uploadPanel.payloads != null)  {        uploadPanel.payloads.splice(0, uploadPanel.payloads.length);     //_payloads.dataProvider = uploadPanel.payloads;    payloadInfo.allPayloadsDataProvider = uploadPanel.payloads;  }  if ( payloadInfo != null ) payloadInfo.clear();}public function uploadsfinished():void{  snd.play();  // call service side to write down a metadata file ...  var metadata:MsgMetadata = new MsgMetadata();    //metadata.pmode = _pmode.text;  metadata.pmode = _pmodes.selectedLabel;  if ( _agreementRef.text != null && _agreementRef.text != "" )       metadata.agreementRef = _agreementRef.text;  if ( _conversationId.text != null && _conversationId.text != "" )      metadata.conversationId = _conversationId.text;  if ( _refToMessageId.text != null && _refToMessageId.text != "" )       metadata.refToMessageId = _refToMessageId.text;  //metadata.messageProperties = messageProperties.properties;  if ( messageProperties.properties != null &&       messageProperties.properties.propertyArray.length > 0 )       metadata.properties = messageProperties.properties  //metadata.fromParties = fromParty.parties;  if ( !fromParty.producer.isEmpty() )       metadata.producer = fromParty.producer;  //metadata.bodyPayload = _bodyPayload.text;  //metadata.setBodyPayload(_bodyPayload.text);  //var bp:String = _payloads.selectedLabel;  //if ( bp != null && bp != "" && bp != "NONE" )   //     metadata.setBodyPayload(bp);  if ( !payloadInfo.isEmpty() ) metadata.payloads = payloadInfo.payloads;    ebManager.writeMetadata(metadata, directory);  clear();}    public function updatePayloadList(ev:Event):void{  //Alert.show("calling updatePayloadList() in submitMessageScript.as");  payloadInfo.allPayloadsDataProvider = uploadPanel.payloads;  payloadInfo.payloadListChanged();}            public function initApp():void{  if ( uploadPanel == null ) uploadPanel = new SelectPayload();  uploadPanel.addEventListener("payloadSelectionChange", updatePayloadList);  payloadInfo.allPayloadsDataProvider = uploadPanel.payloads;		  uploadPanel._progressbar = _progressbar;  uploadPanel._uploadbutton = _uploadbutton;  _progressbar.mode = "manual";  _progressbar.label = "";  _uploadbutton.enabled = false;  // Set Up URLRequest _uploadURL = new URLRequest; _uploadURL.method = "POST"; _uploadURL.data = _variables; _uploadURL.contentType = "multipart/form-data";   ebManager2.addEventListener("result", onResult);  ebManager2.addEventListener("fault", onFault);   ebManager2.pmodeList();}public function onResult(event:Object):void{  if ( event.result == null ) return;  var pmodesList:Array = event.result as Array;  if ( pmodesList != null && pmodesList.length > 0 )        _pmodes.dataProvider = pmodesList;}  	  public function onFault(obj:Object):void{  Alert.show("Could not connect to remote MSH to get pmode list",               "Server Temporary Down" + obj.toString());}//Upload File Cueprivate function uploadFiles(newDirectory:Boolean):void{  if ( uploadPanel._files.length > 0 )  {  	if ( newDirectory )   	     //directory = _pmode.text + "_" + mx.utils.UIDUtil.createUID();  	  directory = _pmodes.selectedLabel + "_" + mx.utils.UIDUtil.createUID();  	_uploadURL.url = getBaseURL() + "/upload.jsp?pmodeDir=" + directory;  	    //putVariables();    uploadPanel._file = FileReference(uploadPanel._files.getItemAt(0));        uploadPanel._file.addEventListener(Event.OPEN, openHandler);    uploadPanel._file.addEventListener(ProgressEvent.PROGRESS, progressHandler);    uploadPanel._file.addEventListener(Event.COMPLETE, completeHandler);    uploadPanel._file.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);    uploadPanel._file.addEventListener(HTTPStatusEvent.HTTP_STATUS,httpStatusHandler);    uploadPanel._file.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);    uploadPanel._file.upload(_uploadURL);    setupCancelButton(true);  }  }/** *  toggle upload button label and function to trigger file uploading  *  or upload cancelling */   private function setupCancelButton(x:Boolean):void{  if (x == true)  {    _uploadbutton.label = "Cancel";    uploadPanel._browsebutton.enabled = false;    uploadPanel._delButton.enabled = false;    uploadPanel._clearAllButton.enabled = false;    _uploadbutton.addEventListener(MouseEvent.CLICK, cancelFileIO);          }  else if (x == false)  {    _uploadbutton.removeEventListener(MouseEvent.CLICK, cancelFileIO);    resetForm();  }}private function cancelFileIO(event:Event):void{  uploadPanel._file.cancel();  setupCancelButton(false);  uploadPanel.checkCue();}          // reset form item elementsprivate function resetForm():void{  _uploadbutton.enabled = false;  _uploadbutton.addEventListener(MouseEvent.CLICK,uploadFiles);  _uploadbutton.label = "Submit";  _progressbar.maximum = 0;  uploadPanel._totalbytes = 0;  _progressbar.label = "";  uploadPanel._delButton.enabled = false;  uploadPanel._clearAllButton.enabled = false;  uploadPanel._browsebutton.enabled = true;}              // called after the file is opened before upload    private function openHandler(event:Event):void{  trace('openHandler triggered');  uploadPanel._files;}        /**  * called during the file upload of each file being uploaded | we use  * this to feed the progress bar its data */private function progressHandler(event:ProgressEvent):void {          _progressbar.setProgress(event.bytesLoaded,event.bytesTotal);  _progressbar.label = "Uploading " +       Math.round(event.bytesLoaded / 1024) + " kb of " +       Math.round(event.bytesTotal / 1024) + " kb " +       (uploadPanel._files.length - 1) + " files remaining";}/**  * called after a file has been successully uploaded | we use this  * as well to check if there are any files left to upload and how to handle it */        private function completeHandler(event:Event):void{  uploadPanel._files.removeItemAt(0);  if (uploadPanel._files.length > 0)  {  	uploadPanel._totalbytes = 0;    uploadFiles(false);  }  else  {    setupCancelButton(false);    _progressbar.label = "Uploads Complete";    var uploadCompleted:Event = new Event(Event.COMPLETE);    dispatchEvent(uploadCompleted);    uploadsfinished();  }}              /**  * only called if there is an  error detected by flash player browsing  * or uploading a file    */private function ioErrorHandler(event:IOErrorEvent):void{  //trace('And IO Error has occured:' +  event);   mx.controls.Alert.show(String(event), "ioError", 0);}    /** * only called if a security error detected by flash player such  * as a sandbox violation */private function securityErrorHandler(event:SecurityErrorEvent):void{  //trace("securityErrorHandler: " + event);  mx.controls.Alert.show(String(event),"Security Error",0);}        //  This function its not requiredprivate function cancelHandler(event:Event):void{  // cancel button has been clicked;  trace('cancelled');}        /**   * after a file upload is complete or attemted the server will return  * an http status code, code 200 means all is good anything else is bad. */private function httpStatusHandler(event:HTTPStatusEvent):void {  // trace("httpStatusHandler: " + event);  if (event.status != 200)  {    mx.controls.Alert.show(String(event),"Error",0);  }}private function getBaseURL():String{  var i:int = parentApplication.url.lastIndexOf(".");  if (i > 0 )  {    var k:int = parentApplication.url.lastIndexOf("/");  	return parentApplication.url.substr(0, k);  }  else  {    if (parentApplication.url.lastIndexOf("/") == parentApplication.url.length - 1)  	     return parentApplication.url.substr(0, parentApplication.url.length - 1);  	else return parentApplication.url;  }}