<?xml version="1.0" encoding="ISO-8859-1" ?>
<document>
  <properties>
    <title>Holodeck Packages</title>
    <author email="hamidbm@ymail.com">Hamid Ben Malek</author>
    <author email="jdurand@us.fujitsu.com">Jacques Durand</author>
  </properties>
  <body>
   <section name="Package org.holodeck.ebms3.config">
     This package contains the classes for holodeck to read PMode documents, that is
     classes for representing PModes as objects and a way to serialize them to xml documents.
     A developer can also use these classes to build PMode objects instead of reading them
     from PMode documents.
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.consumers">
     This package contains classes relative to consuming messages. For example, all consumer classes
     implement the interface <b>org.holodeck.ebm3.consumers.EbConsumer</b>. Some ready-to-use consumer
     implementations are in the sub-package <b>org.holodeck.ebm3.consumers.impl</b>.
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.handlers">
     This package contains all the handler implementations (remember an axis module is a set of handlers).
     Handlers are just interceptors that run within axis2 pipeline. The implementation of the ebMS module
     is broken into several handlers, each one accomplishing a small task. This is much easier to maintain
     (having the functionality of the ebMS module broken into separate pieces) than putting the whole
     behaviour into one single monolithic implementation class.
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.module">
     this package contains classes relative to the module itself, as well as some global objects such as
     the database adapter, global constants, etc... For example, the module
     class itself is represented by the class <b>Ebms3module</b>, the database adapter (the equivalent of
     Hibernate template) is the class <b>DbStore</b>.
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.packaging">
     This package contains the classes that represent the data in the ebMS SOAP header.
     These classes are used to populate a SOAP message with ebMS headers.
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.persistent">
     This package contains all the data that can be saved to database (that is, JPA-annotated classes intended
     for persistence to database using JPA/Hibernate):
     <ul>
       <li>
         <b>UserMsgToPush</b>: as the name suggest, this class represents a User Message (SOAP message with payloa data in it)
         that is intended to be sent out (push out) by holodeck.
       </li>
       <li>
         <b>UserMsgToPull</b>: this class represents a User Message that will wait to be pulled out when an appropriate
         PullRequest arrives for it.
       </li>
       <li>
         <b>ReceivedUserMsg</b>: this class represents a User Message that has just been received.
         This User Message could have been push out by the remote MSH, or it could have been pull out
         by this MSH.
       </li>
       <li>
         <b>SyncResponse</b>: this class represents a User Message that is intended to be sent out
         in the back channel of a two-way/sync request. These responses could be dynamically constructed or
         they could be stored in the database and ready to be sent as response in the back channel when a request comes
         that is using a two-way/sync MEP.
       </li>
       <li>
         <b>ReceiptTracking</b>: this class keeps track of messages that were sent out and whether an AS4 receipt
         was received for them or not.
       </li>
       <li>
         <b>ReceiptData</b>: this class represents an AS4 receipt stored in the database that should be
          sent out as a callback (in its own separate channel) to some remote MSH waiting for such a receipt to arrive.
       </li>
       <li>
         <b>MsgIdCallback</b>: this class keeps stores the class that should be called to process
         a message that has been pulled out by the MSH automatically and not on the behalf of a user.
         A user can tell this MSH to pull a User Message from a remote MSH and when such a message arrives,
         it is given to the user who asked this MSH to initiate a PullRequest. But, most of the time,
         the User who wants to initiate a PullRequest is not even online connected with this MSH.
         This MSH will automatically (in the background) send PullRequest messages, but the user is not online
         to process the received pulled User Message, so this MSH will just give those received User Messages
         to an appropriate class (called callback class) that will process the received pulled message on behalf of the
         user who is not online and connected to this MSH.
       </li>    
     </ul>
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.submit">
     this package contains classes responsible for the whole submission operation: the ability
     to scan the <b>holodeck/store/send/</b> folder for new dropped payloads, the ability to read those payloads,
     construct messages, store them in the database, push the messages out (for those messages that
     need to be push out).
   </section>
   <br/>
   <section name="Package org.holodeck.ebms3.web">
     this package contains classes that work together with ActionScript 3 classes running on the Flex interface
     (inside the browser of a remote client who is interacting with Holodeck over HTTP).
   </section>
   <br/>
   <section name="Package org.holodeck.reliability.config">
     this package contains classes for reading the xml configuration file
       "<b>holodeck/config/reliability-config.xml</b>".
   </section>
   <br/>
   <section name="Package org.holodeck.reliability.handlers">
     this package contains all the handlers of the reliability module. The functionality of
     the reliability module is broken down into many separate handlers, each doing a simple task.
   </section>
   <br/>
   <section name="Package org.holodeck.reliability.packaging">
     this package contains the classes responsible for populating a SOAP message with
     reliability headers.
   </section>
   <br/>
   <section name="Package org.holodeck.reliability.persistent">
     this package contains all the data that is persisted to database by the reliability module.  
   </section>
   <br/>
  </body>
</document>
