<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to Fujitsu.
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  
--> 

<document>
  <properties>
    <title>Tutorial 2</title>
    <author>Jacques Durand</author>
  </properties>
  <body>
    <section name="TUTORIAL 2: Using two Holodeck instances">
      <p>
	In Tutorial 1, we have seen how to configure a single Holodeck instance for sending messages in a Push mode, where the Sending and Receiving Holodeck instance is the same one (sending to itself). This tutorial is about running two communicating Holodeck instances on the same machine. This is closer to a real set-up, and yet provides a convenient environment for debugging your application integration and simulate sending-receiving as it will actually be done between two remote Holodeck instances. </p>

	<p>The general model for manual usage of Holodeck, in the case of "push" messaging, is same as in Tutorial 1, except this time we deploy two distinct Holodeck instances: the Sending instance (named here holodeck-A) and the Receiving instance (named here holodeck-B). The figure from Tutorial 1 is therefore more appropriate for this tutorial:</p>
	<img src="../images/HDK-fig-ManualPush.png" alt="Manual Push Messaging"/>

      <subsection name="Achieved in this Tutorial:">
        <ul>
	  <li>Learn the basics about Holodeck server foundation: its deployement as a Web application.</li>
          <li>Configuring two Holodeck instances on the same machine. </li>
	  <li>Sending (push) a message from one instance to the other.</li>
        </ul>
      </subsection>
      <subsection name="STEP 1: Differentiate the two Holodeck instances:">
        <ul>
	  <li>Stop any running instance of Holodeck (Control-C in the start window)</li>
	  <li>We will deploy a second Holodeck instance, running its own Web server (Tomcat). For this, duplicate the root "holodeck" folder of the instance used in Tutorial 1, and name it <b>holodeck-B </b>. You should also rename the original one as  <b>holodeck-A </b>, although not necessary. Each one of these represents a Holodeck instance bundled with an instance of the Web service stack Axis2 from Apache and of the Tomcat server. Each one of these two packages is to be deployed as a Web application on top of the Tomcat server.</li>
	  <!--li>Optionally, so that the URLs of both A and B are easier to distinguish: Change the name of the file: holodeck-A\server\conf\Catalina\localhost\holodeck.xml to: holodeck-A.xml. Do the same for holodeck-B. If you did not do that, the URLs would only differ by their port number, which is OK but harder to distinguish for the human eye.</li -->
	  <li>Change the ports numbers of Tomcat in holodeck-B instance. For this, access the file named holodeck-B/server/conf/server.xml. This file is configuring various ports. You need to differentiate all ports introduced as "port=..." in this file, from the analogous ports declared in server.xml for holodeck-A. We can achieve this simply by adding "1" to every port number in holodeck-B/server/conf/server.xml. So for example, you should have a line as:  Connector port="8080" protocol="HTTP/1.1". After modification it should be: Connector port="8081" protocol="HTTP/1.1". Do the same for all other ports introduced by "port=...". NOTE: it is not necessary to do this for those ports introduced by "redirectPort="...".</li>
	  <li>After these changes, the URLs for holodeck-A and  holodeck-B will be respectively:
 http://localhost:8080/holodeck/services/msh and http://localhost:8081/holodeck/services/msh. </li>
	  <li> As a good practice, do the following which is mostly useful when many P-Modes are deployed that use the same MPC. (This helps a receiving MSH to resolve which P-Mode is to be used when the sender MSH has not included the pmode name in the message.) Access the module.xml files of each Holodeck instance: e.g.
holodeck-B\msh\WEB-INF\modules\holodeck-ebms3\META-INF\module.xml. Modify the value of [parameter name="MSHAddress" ...] so that it reflects the URL assigned to this Holodeck instance: http://localhost:8081/holodeck/services/msh.</li>
        </ul>
      </subsection> 

      <subsection name="STEP 2: Prepare folders and PModes for Sending and Receiving Message (Push mode)">
 <p> We will now set-up holodeck-A for send messages from to holodeck-B.  For this we will reuse what we learned in Tutorial 1. We will actually reuse the set-up from Tutorial 1. </p>
        <ul>
	  <li>For convenience, start by cleaning-up the receive-folders under store/receive in holodeck-A and holodeck-B.  Under holodeck-A\store\send, prepare a "send-folder" for a message to be sent out as done in Tutorial 1. You may prepare more than one if several messages need be sent. Add payloads and/or attachments.</li>
	  <li>Update the PMode file you elected in holodeck-A,for example MyShipment.xml so that the destination URL (in the Binding/MEP/Leg/Endpoint/@address attribute) points at holodeck-B, i.e. with value: http://localhost:8081/holodeck/services/msh. Preferably set the soapVersion attribute to 1.2</li>
	   <li>The PMode you just updated for holodeck-A should also be shared by holodeck-B. Move this PMode file under config/pmodes of the holodeck-B instance.</li>
        </ul>
      </subsection>

      <subsection name="STEP 3: Start both holodeck-A and holodeck-B instances.">
        <p>Start separately each Holodeck instance (e.g. for starting holodeck-A: click on holodeck-A/server/bin/startup.bat). Before doing this, it is good practice to clean-up the logs: remove all files under holodeck-A/server/logs, if any.</p>
        <ul>
	  <li></li>
        </ul>
      </subsection>

      <subsection name="STEP 4: Execute the message(s) transfer from Holodeck-A to Holodeck-B.">
        <p>Proceed then as in Tutorial 1: in the send-folder of the message you want to send out, rename metadata.xml.sample (or metadata.xml.processed ) as just: metadata.xml. You should then observe in the store\receive folder of Holodeck-B, the creation of a subfolder Messages_[mpc name], which in turn contains a folder named as: Msg-[timestamp].</p>
        <ul>
	  <li></li>
        </ul>
      </subsection>

   </section>
  </body>
</document>
