<?xml version="1.0" encoding="UTF-8"?>

<!--
Licensed to Fujitsu.
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  
--> 

<document>
  <properties>
    <title>Tutorial 1</title>
    <author>Jacques Durand</author>
  </properties>
  <body>
    <section name="TUTORIAL 1: Getting Started.">
      <p>
	The Holodeck handler can be controlled in two modes:
      </p>
      <p>
	<b>1. Manual:</b> Or manual feed of messages to be sent. In this mode, no programming is required to prepare messages for sending, and to verify their reception.
      </p>
      <p>
	<b>2. Programmatic:</b> In this mode, a user-defined application is interfacing with
	Holodeck via an API in order to submit messages, or in order to consume received messages.</p>
	<!-- img src="images/ebMS3-figures-model.jpg" width="70" height="50" alt="General messaging model"/ -->

      <p> This tutorial is about using Holodeck in its manual mode without having to write a single line of code. This tutorial will illustrate one of the two modes of sending: the "push" mode (the other mode - "pull" - is illustrated in another tutorial).
      </p>
      <p>
	For this tutorial it is not even necessary to set-up two distinct Holodeck instances e.g. on two different machines. A single Holodeck installation (or Holodeck Message Service Handler - MSH) will suffice to get familiar with the basics about configuration and message processing, and to get started. This Holodeck MSH will send and receive to itself. The only difference when practicing with two machines, is the URL address in the PMode.

        <!-- a href="http://svnbook.red-bean.com/">Version Control with Subversion</a -->.
	The general model for manual usage of Holodeck, in the case of "push" messaging, is as follows:
	<img src="../images/HDK-fig-ManualPush.png" alt="Manual Push Messaging"/>

In this tutorial however, we will work with a single Holodeck instance for convenience: the Sending Holodeck and the Receiving Holodeck are the same.
      </p>
      <p> The figure above illustrates the data flow exercised in this tutorial. The message Producer is an abstraction for whoever (person or application - here a person: yourself) submits the message to be sent. The message content is packaged as a new folder (a "Send-folder"). The Holodeck agent periodically reads these folders, and generates messages that are first stored in its "Sending Store" (a database) before beeing sent to the other Holodeck instance. There, the message is stored in a"Receiving Store" before an application agent (Message Consumer Application) picks it up and puts it in Receive-folders, for you to browse.
      </p>
<p> In this tutorial, the embedded (Java "Derby") database is being used for message persistence: no need to use a separate database system such as MySQL. </p>
      <p>NOTE: In case MySQL is used, it should already be running as a (Windows) Service: the Installer normally configures it as a Service to be started automatically with the Operating System. When using Windows, a service named MySQL-5.0.19 must show "started" status (access Services under administration tools).</p>
      <subsection name="Achieved in this Tutorial:">
        <ul>
          <li>Manual usage of the MSH. </li>
	  <li>Sending (push) a simple one-way message, with diverse attachments.</li>
	  <li>Understanding the PMode configuration that controls the sending.</li>
	  <li>Verifying the reception.</li>
        </ul>
      </subsection>
      <subsection name="STEP 1: Get Holodeck Started">
        <ul>
	  <li>Identify in your installed directory, the "holodeck" root folder. 
First it is good practice to clean-up the log files: remove all files under holodeck/server/logs if any. Then under: holodeck/server/bin, execute: startup.bat. 
	  You should see inside the generated DOS window, a last line like: 
	  "INFO: Server startup in xxxx ms"</li>
	  <li>Check the logs under: holodeck/server/logs
	  You should see a log named "holodeck-ebms3.log" freshly generated with one of its last lines containing:
	  "... - ebms3 Module Started."</li>
	  <li>In case you need to stop Holodeck, just type the Control-C key in the dos window used to start Tomcat.</li>
        </ul>

      </subsection> 
      <subsection name="STEP 2: Prepare a Message to be Sent">
        <ul>
	  <li>Identify in your installation the folder: holodeck/store/send. This folder will contain other folders (or "send-folders"), one for each message to be sent out.</li>
	  <li>Create a new send-folder under store/send, and give it the name you want (say, "mymessage") and put in it the documents you want to send within that message. For example, there might be an XML document, and one or more attachments of different kinds (images, binary, etc.). You can reuse material found in one of the pre-existing send-folders, say msg-1.</li>
	  <li>Copy a file named <b>metadata.xml.sample</b> or  <b>metadata.xml.processed</b> from an existing send-folder (e.g. "msg-1") into your new send-folder. This file will control the way your message will be sent out. It contains some additional information ("metadata") that will be added to the message envelope that carries your business documents. See the comments inside this file to understand the role of each one of its parts. </li>
	  <li>Edit the "metadata.xml.sample" (or metadata.xml.processed) file. (NOTE: There should be one of the pre-existing Send-folder under store/send that has a commented version of this file.) For now you will need to touch only three of its parts: </li>
	  <ul>
	    <li>The <b>payloads</b> element. You need to update this element to match the message parts files that you have put in your send-folder (choose the "cid" name you want). In the <b>bodyPayload</b> element, choose the name of a part that has been formated in XML (if none, the SOAP:Body will be empty): that would be your "main" message part if any (it will be put into the SOAP envelope of the message, while the others will be "attachments"). </li>
	    <li>The <b>producer</b> element. This element contains data that identifies the Sender (or message Producer) application. For example, put a company name in the <b>partyId</b> element, and also a "role" (e.g. Seller or Buyer) in the <b>role</b> element. The Producer should identify the sending party at application level from a business viewpoint.</li>
	    <li>The <b>pmode</b> element. This element contains the name (or identifier) of the PMode to be used. Before setting the pmode element, we need to understand better the PMode concept and update its related file: this is done in Step 3.</li>
        </ul>
        </ul>
      </subsection>
      <subsection name="STEP 3: Define a Processing Mode for the Message">
        <p>
	  A PMode - or Processing Mode - is a set of configuration data that governs the processing of your message(s), both on Sending side and Receiving side. Several PModes (e.g. some with Security, some without, etc.) may be deployed, each one of these governing the processing of a class of messages. Each PMode needs be deployed both on Sending and Receiving sides. </p>
	<p>Under the holodeck/config folder you will find a <b>pmodes</b> folder. Open the SendShipment.xml file. This file contains a PMode definition of name "SendShipment". Make a copy of this file and call it <b>MyShipment.xml</b>. Let us look at the content of MyShipment.xml and modify some of it: </p>
        <ul>
	  <li>The <b>UserService</b> element identifies the destination party from a business viewpoint. You can modify its PartyId and Role elements based on your partner business identification, in the same way you did in the MyShipment.xml file for your own party. You should also modify the Service and Action elements, to represent respectively a general business service (e.g. "Purchasing") and a specific transaction (e.g. "SendShipment"). You can ignore the PayloadInfo element, which is mostly informative (not processed).</li>
	  <li>The <b>Producer</b> element is analogous to the From element you modified in metadata.xml.sample.  The latter overrides the former, so no need to update it.</li>
	  <li>The <b>Binding</b> element identifies the type of transaction. This sarts with the message exchange pattern (MEP) e.g. a One-Way or a Two-Way. We are only interested in One-Way types here. The binding of this MEP to the underlying protocol - here HTTP - is also indicated: is the message pushed (One-Way / Push) or pulled (One-Way / Pull). In this tutorial we use One-Way / Push.</li>	  
	  <li>Another sub-element of Binding/MEP is the <b>Leg</b> element. For One-Way / Push there is only one "leg" (there will be two in One-Way / Pull). The MPC attribute identifies a "channel", or message processing channel. Give it a name of your choice. The other attributesof teh Leg element: userService and  producer, should be set to the names you gave to the previous UserService and Producer elements.</li>	  
	  <li>Finally, the <b>Endpoint</b> sub-element provides protocol details: (1) the destination address or URL (in this tutorial we use the same URL that identifies our local Holodeck installation, as it will send to itself). The address should be <b>http://localhost:8080/holodeck/services/msh</b>, indicating that the destination is the Holodeck instance deployed on the local machine. </li>	  
        </ul>

      </subsection>

      <subsection name="STEP 4: Get the Send-folder Ready for sending">
<p>Finalize the send-folder:</p>
        <ul>
	  <li>Make a last edit of the metadata.xml.sample file to point to the PMode you just updated: the pmode element should be set to the name you chose in the MyShipment.xml file (PMode/@name attribute) </li>
	  <li>Rename the metadata.xml.sample file as just "metadata.xml".
The "submit" agent will automatically read all send-folders that have a "metadata.xml" file inside (every 20 second or so), package an ebms message from the content of each send-folder, and put it in a "Sending store". From there another agent will pick-it up and send it out (push mode).</li>
	  <li>Verify that the message has been processed by the submit agent: an indication of this is the automatic renaming by this agent of the <b>metadata.xml</b> file, into: <b>metadata.xml.processed</b> </li>
        </ul>
      </subsection>
      <subsection name="STEP 5: Verify the Message Reception">
        <p> The sent message must have been received in the "Receiving store" of your Holodeck instance. You have no direct manual access to this store, but a small consumer component called the Message Consumer Application will automatically transfer it under the holodeck/store/receive folder that you can access. More precisely, there will be under store/receive another folder for all messages sent to this channel (i.e. having same MPC value as specified in the P-Mode under: Binding/MEP/Leg/@mpc). This "channel" folder is named as: Messages_[mpc name]. </p>
	<ul>
	  <li>
Check under the store/receive folder if there is a channel folder correponding to the MPC name you have used for your message. You should find a folder named as "Msg_[timestamp]", that contains the message you have sent out in Step 2.</li>
	  <li>Verify that the message has the right payload parts as attachments.</li>
	  <li>Look at the Message Envelope in <b>envelope.xml</b>. This contains the SOAP envelope including the XML payload that was intended for the SOAP Body. This envelope also contains the ebMS header (eb:Messaging). You should see in this header some data matching the corresponding metadata.xml file and PMode, such as mpc, Service, Action, From, etc.</li>
	  <li>Look at the additional headers in <b>SOAP-Headers.xml</b>. This contains all the additional SOAP headers that were removed from the Envelope at reception because they were consumed by other modules (reliability, security). In this tutorial, none of these additional headers is used.</li>
	  <li>You can clean-up your store/receive folder at any time, or create new messages to be sent. To resend a message, just rename its metadata.xml.processed folder as: metadata.xml. Remember that you do not control when the message is sent: some Holodeck agent is periodically scanning the store/send folders to check which one is ready for sending (meaning: has a metadata.xml file in it).
	  </li>
        </ul>
      </subsection>
    </section>
  </body>
</document>
