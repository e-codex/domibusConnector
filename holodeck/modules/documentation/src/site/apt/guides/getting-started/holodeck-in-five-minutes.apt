 ----
 Holodeck in 5 Minutes
 -----
 Hamid Ben Malek
 -----
 March 2009
 -----

Holodeck in 5 Minutes

  You can also go through the tutorials: {{{../../tutorials/tutorial1.html}tutorial 1}}, {{{../../tutorials/tutorial2.html}tutorial 2}},
  {{{../../tutorials/tutorial3.html}tutorial 3}}, and {{{../../tutorials/tutorial4.html}tutorial 4}}.
  
* Run Holodeck

  Start Holodeck by starting tomcat: holodeck-1.0/server/bin/startup.bat

  When tomcat starts, it will write some log files in "holodeck-1.0/server/logs/". For example, the log file for the holodeck-ebms3 module would print something like this:

------
DEBUG org.holodeck.ebms3.module.Ebms3Module  - initialization..., 
DEBUG org.holodeck.ebms3.module.Ebms3Module  - Using PersistenceUnit : ebms3-derby
DEBUG org.holodeck.ebms3.module.Ebms3Module  - Loading Workers...
DEBUG org.holodeck.ebms3.module.Ebms3Module  - workers file is: D:\holodeck\modules\holodeck-ui\target\index-holodeck.dir\server\webapps\..\..\msh\WEB-INF\modules\holodeck-ebms3\..\..\..\..\config\workers.xml
DEBUG org.holodeck.ebms3.workers.impl.PModesWatcher  - Loading PModes...
DEBUG org.holodeck.ebms3.module.Configuration  - PMode ImagePulling has been loaded.
DEBUG org.holodeck.ebms3.module.Configuration  - PMode QuantityOnHandPulling has been loaded.
DEBUG org.holodeck.ebms3.module.Configuration  - PMode SC1 has been loaded.
DEBUG org.holodeck.ebms3.module.Configuration  - PMode SendShipment has been loaded.
DEBUG org.holodeck.ebms3.module.Configuration  - PMode UploadMode has been loaded.
DEBUG org.holodeck.ebms3.workers.impl.PModesWatcher  - All PModes have been loaded.
DEBUG org.holodeck.ebms3.workers.WorkerPool  - started worker pmodesWatcher
DEBUG org.holodeck.ebms3.workers.WorkerPool  - started worker submitWorker
DEBUG org.holodeck.ebms3.workers.WorkerPool  - started worker senderWorker
DEBUG org.holodeck.ebms3.module.Ebms3Module  - started the workers pool
DEBUG org.holodeck.ebms3.module.Ebms3Module  - Done loading Workers
DEBUG org.holodeck.ebms3.module.Ebms3Module  - ebms3 Module Started.
------

  As you can see from the above sample, the log entries provide many information such as what relational database being used (in this case "Apache Derby"), what PModes documents were loaded by the MSH, etc... By default, log level is DEBUG, and if you want to reduce the amount of logging by changing the log level to INFO for example, you can do so by changing the file "holodeck-1.0/msh/WEB-INF/classes/log4j.properties".

* Choose a PMode

  Now before we can send out a message to another partner, we need to decide which PMode to use. In this simple
example, we will use an already existing PMode called "UploadMode" which is represented by the xml file 
"holodeck-1.0/config/pmodes/UploadMode.xml". If you open this file, you will see that it contains the following:
  
------
<PModes>

  <PMode name="UploadMode">

    <UserService name="ConsumerTest">
      <ToPartyInfo>
        <PartyId>ConsumerTest</PartyId>
      </ToPartyInfo>
      <CollaborationInfo>
        <Service>UploadService</Service>
        <Action>upload</Action>
      </CollaborationInfo>
    </UserService>

    <Binding name="uploadBinding">
      <MEP name="One-Way/Push">
        <Leg number="1" mpc="UploadMPC" userService="ConsumerTest"
             soapAction="upload" reliability="CALLBACK" security="sign">
          <Endpoint address="http://localhost:8080/holodeck/services/msh"
                    soapVersion="1.1" />
          <As4Receipt>Response</As4Receipt>
        </Leg>
      </MEP>
    </Binding>

  </PMode>

</PModes>
------

  As you can see, the above PMode does not specify the \<eb:From\> information. This means that an application that 
submits a message to use this PMode, must also provide the information about the "From" partyId who is the source
of the message. This is a way for letting a PMode to be shared by different "From PartyId". If you want a PMode
to be used only by one "From PartyId", then the PMode definition should include such information about the "From PartyId". 
This is done by adding an element called "Producer" (see other PMode definitions for the use of such an element).

  The above PMode also says that the MEP in is a One-Way/Push, that an outgoing User Message would use an MPC
equal to "UploadMPC", that the \<eb:CollaborationInfo\> data would use "UploadService" for the service value, 
"upload" for the action value, that the \<eb:To\> information would include a "To PartyId" called "ConsumerTest".
Also, the PMode definition says that the receiver MSH should send an AS4 Receipt on the back channel (as a response). 
The request message will also be using WS-Reliability that expects an Ack as a Callback, and that a security quality
of service should also be used (the security quality is called "sign", and you can find such a quality in the file
"holodeck-1.0/config/security-config.xml").

  In the PMode definition above, you can see that the other partner to which we will send the message is nothing but
our MSH itself (that is, we will send a message to ourself). If you don't want to send the message to yourself, then
you would have to modify the value of the "address" attribute of the "Endpoint" element of the first leg of the
PMode. Here, we will assume that we will send a message to ourself. 

* Send a Message

  If you open the folder "holodeck-1.0/store/send/", you will find there a folder called "msg-1". Open the folder
"msg-1", and then open the file "metadata.xml.processed" to look at its contents. This file contains the following:

-------
<Metadata>
   <pmode>UploadMode</pmode>
   <AgreementRef>AGR123</AgreementRef>
   <ConversationId>123456</ConversationId>
   <From>
      <PartyId type="corp">fujitsu.com</PartyId>
      <PartyId type="corp">fla.fujitsu.com</PartyId>
      <Role>seller</Role>
   </From>
   <Properties>
      <Property name="price">$40</Property>
      <Property name="greeting">Hello there</Property>
   </Properties>
   <Payloads>
      <BodyPayload>body.xml</BodyPayload>
      <Payload cid="bradPicture">brad-pitt.jpg</Payload>
      <Payload cid="geronimo">geronimo.pdf</Payload>
      <Payload cid="claire">claire-forlani.jpg</Payload>
      <Payload cid="bear">Bear.wmv</Payload>
   </Payloads>
</Metadata>
-------

  This "metadata" file provides the MSH Sender with information so that the MSH would know what to do with the 
submitted message. First, it tells the MSH that the submitted message should used a PMode called "UploadMode",
then it provides information about some SOAP Header elements such as what should be the \<eb:AgreementRef\>,
\<eb:ConversationId\>, the \<eb:From\>, \<eb:MessageProperties\> to include in the \<eb:Messaging\>, and finally
the payloads to include in the message. All the information in this "metadata" file is optional. The only piece that is
mandatory is the the pmode name (the \<pmode\> element). But since the PMode being used here is "UploadMode"
and such a PMode does not contain information about the \<eb:From\> party, then metadata file in this case should
provide such information. For example, if the element \<Payloads\> is missing from this "metadata" file, then the 
default behavior is that all the files contained in the folder "msg-1" would be included as attachments (except the 
"metadata" file iteself of course). The above "metadata" file tells the MSH Sender to put the file "body.xml" in
the SOAP Body of the message, and that the other files should be included as attachments (you can also specify
the cid, that is the "Content-ID" Mime header). If you don't specify the cid, the MSH Sender would create one for
you. The reason you may sometimes want to control the name given to the cid is that it could be that your xml 
data in the SOAP Body is referencing a hard-coded cid that would be in the attachments, or that you want to provide
the receiver with "Content-Disposition" information so that the receiver MSH would know what name to use when 
saving the attachment. In summary, all the information in the "metadata" file is optional, except for the \<pmode\> 
element.
  
  You may have noticed that the "metadata" file is called "metadata.xml.processed". This tells the MSH Sender to
not process such a message. If you want the MSH Sender to process such a message (to send it), then rename the
"metadata" file from "metadata.xml.processed" to just "metadata.xml". When you do so, the MSH Sender would detect
a change in the name of the "metadata" file, and the message would be submitted to the MSH who woud then store 
the message in its database queue, waiting to be sent. A few seconds later (maybe 30 seconds), the MSH Sender would
read the message from its database and then send it. 

* Verify that the Message is Received

  Since we are sending a message to ourself, we should see the received message in the same MSH (here the MSH Sender 
is also playing the role of the MSH receiver since we are sending to ourself). To see the received message, look in 
the folder "holodeck-1.0/store/receive/". There you should see a folder called "Messages_UploadMPC" (this is because
the received message is using an MPC called "UploadMPC", the reciever MSH is organizing received messages by grouping
them under the same folder whose name contains the MPC being used. If you open the folder "Messages_UploadMPC",
there you will find the received message called "Msg-timestamp" (each received message is saved in a new folder 
whose name contains the timestamp at which the message was received). If you open this folder, you will find there
all the payaload data that was sent with the message. 

