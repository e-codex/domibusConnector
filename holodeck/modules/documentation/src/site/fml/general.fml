<?xml version="1.0" encoding="UTF-8"?>
<faqs title="Frequently Asked Technical Questions">
  <part id="faq">
    <faq id="jms-consumer">
      <question>I have my JMS Provider running (say ActiveMQ for example). I want my MSH, when it
                receives User Messages, to store those received messages into some queue or topic
                that exists in my JMS Provider so that other applications can later on retrieve 
                the messages from the JMS queue or topic. How can I do that?
      </question>
      <answer>
        <p>
          You need to declare a consumer called "SaveToTopic" if you want to store received messages
          into a topic, or declare a consumer called "SaveToQueue" if you want to store received
          messages into a queue. You accomplish this by editing the file "holodeck/config/gateway.xml",
          and add the following entry:
  <source>
   &lt;consumption>
     &lt;consumer className="org.holodeck.ebms3.consumers.impl.SaveToTopic">
       &lt;parameter name="jndi.destination">java:comp/env/jms/holodeckTopic&lt;/parameter>
       &lt;parameter name="jndi.ConnectionFactory">java:comp/env/jms/ConnectionFactory&lt;/parameter>
     &lt;/consumer>
   &lt;/consumption>
  </source>
          The value of the destination parameter should be the name of your topic or queue (in the
          example above, it is called "HOLODECK". The value of the parameter url should be the
          the URL of your JMS broker.
        </p>
      </answer>
    </faq>
  
    <faq id="tomcat">
      <question>I have deployed Holodeck on Tomcat, but when I start Tomcat, Holodeck is not loaded
                (no Holodeck log files are created in Tomcat\logs directory)
      </question>
      <answer>
        <p>
          There could be that you have many Tomcats installed on your machine and that the environment
          variable TOMCAT_HOME (or CATALINA_HOME) is set to point to another tomcat instance and not the one
          in which you have deployed Holodeck. If you have CATALINA_HOME or TOMCAT_HOME among your environment
          variables, delete it.
        </p>
      </answer>
    </faq>

    <faq id="logs">
      <question>Where are Holodeck log files?</question>
      <answer>
        <p>
          If you have deployed Holodeck on Tomcat, you will find Holodeck log files in Tomcat's logs
          directory. When Tomcat starts, Holodeck will create the following log files: (a) axis2.log
          (this file will contain all the output from Axis2 stack), (b) hibernate.log (this file will
          contain all the output from the Hibernate component of Holodeck), (c) holodeck-ebms3.log
          (this file contains output only from the ebMS3 Module), (d) holodeck-reliability.log (this file
          contains output only from the Reliability Module), (e) holodeck-security.log (this file contains
          output only from the Security Module).
        </p>
      </answer>
    </faq>

    <faq id="started">
      <question>How do I know that Holodeck started successfully when I start Tomcat?</question>
      <answer>
        <p>
          Look at the log files for the various modules contained within Holodeck. For the ebMS3 Module,
          look for the log file holodeck-ebms3.log and make sure you see a line printed that says someting
          like: ebms3 Module Started.
        </p>
        <p>
          Similarly look for the log file for Reliability and the other modules to see if any exceptions were
          thrown and/or whether you see the word "started".
        </p>
      </answer>
    </faq>

    <faq id="msg-submit">
      <question>When I manually submit a message to Holodeck (by manually creating an empty folder under the
           directory "holodeck-1.0/store/send/" and putting
           the payloads in it), how does Holodeck know what to do with the message (push it or store it to be
           pulled)?
      </question>
      <answer>
        <p>
          When you put payloads in your empty folder, you also need to put an xml file called "metadata.xml" which
          basically tells Holodeck what to do with the message. This "metadata.xml" file contains many optional
          information except for one mandatory input, namely the name of the PMode to be associated with
          the submitted message.
        </p>
      </answer>
    </faq>

    <faq id="Compiling">
      <question>How do I compile Holodeck source code?</question>
      <answer>
        <p>
          You need to have JDK 1.6 or later, then install <a href="http://maven.apache.org">apache maven</a>.
          To build the binaries, from a DOS command window, issue the following three commands:
          <ul>
            <li><b>mvn package</b>  (this command is issued from holodeck root folder "holodeck-b2b"</li>
            <li><b>mvn site</b>  (this command is issued from holodeck root folder "holodeck-b2b"</li>
            <li><b>mvn package</b>  (this command is issued from holodeck-ui folder "holodeck-b2b/modules/holodeck-ui"</li>
          </ul>
          The first command builds holodeck and assembles everything, except for the documentation. The second command
          will generate the documentation (and also Javadocs) and will copy this documentation into the folder
          "holodeck/msh/docs/". When starting holodeck (by running the batch file "holodeck/server/bin/startup.bat"),
          the documentation can be accessed using the address: <b>http://localhost:8080/holodeck/docs</b><br/>.
          The third command builds the Flex UI and copy it to "<b>holodeck/msh/</b>" directory.
        </p>
      </answer>
    </faq>

    <faq id="unsupportedAlgorithm">
      <question>When I send a message using security, I get the following exception:
        <p>Caused by: org.apache.ws.security.WSSecurityException: An unsupported signature or
           encryption algorithm was used (unsupported key transport encryption algorithm:
           No such algorithm: http://www3.org/2001/04/xmlenc#rsa-1_5)
        </p>
      </question>
      <answer>
       <p>
         The reason for such an unsupported algorithm is because the JCE jars included in JDK
         are limited and don't provide strong signature/encryption. Just download the unlimited
         version of the JCE from <a href="https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jce_policy-6-oth-JPR@CDS-CDS_Developer">Sun's website</a> and overide those JCE jars in your JDK. You can
         read more about this at: http://www.mail-archive.com/wss4j-dev@ws.apache.org/msg01973.html
       </p>
       <p>
         There are two jars: local_policy.jar and US_export_policy.jar. You need to place these
         jars in the directory "jdk-1.6.0_16/jre/lib/security" folder.
       </p>
      </answer>
    </faq>
  </part>
</faqs>
