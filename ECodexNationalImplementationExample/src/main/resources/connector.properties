# defines the endpoint address of the gateway webservice.
gateway.endpoint.address=http://localhost:8085/holodeck/services/BackendService/services/
gateway.name=AT
gateway.role=GW

# As every nation has its own backend client, an implementation of the ECodexConnectorNationalBackendClient interface has to be implemented which handles the connection to its own backend.
# Here the full qualified name of the implementation class which implements ECodexConnectorNationalBackendClient must be given.
connector.national.backend.client.implementation.class.name=eu.ecodex.connector.nbc.ECodexConnectorService

# defines if content mapper module should be used. 
# If there is a certain national format the eCodex message should be transformed to
# this content mapper handles the mapping. The main class ECodexConnectorContentMapperImpl has to be
# extended.
connector.use.content.mapper=true

# If content mapper module is used, an implementation of the ECodexConnectorContentMapper interface has to be implemented with national content.
# Here the full qualified name of the implementation class which implements ECodexConnectorContentMapper must be given.
# If no content mapper is used (connector.use.content.mappe set false), property can be left empty:
# property connector.content.mapper.implementation.class.name=
connector.content.mapper.implementation.class.name=eu.ecodex.connector.mapping.NationalContentMapper

# defines if security toolkit should be used. 
# If messages should be encrypted with a trustOkToken and be sent in an encrypted container,
# this module has to be activated. 
connector.use.security.toolkit=true

connector.security.toolkit.implementation.class.name=

# defines if evidences toolkit should be used.
# In ebMS standard messages should be confirmed or declined by evidences messages sent back to the message sender.
# Those messages contain the state of the message sent and are therefore good to hold reliability.
connector.use.evidences.toolkit=true

# defines how often the gateway and the national backend system should be checked for messages.
# All messages in both directions should be handled entirely before next period starts. So no conflicts are produced.
# Value is in milliseconds. For seconds divide value with 1000. For example 30 000 milliseconds are 30 seconds.
connector.check.messages.period.ms=30000

# defines the timeout for RelayREMMD evidence to be sent back when an outgoing message was sent. 
# After this period, if an outgoing message was sent to the gateway successfully and no RelayREMMD evidence was received, 
# a RelayREMMDRejection will be created for this evidence an sent back to the national system.
# Value is in milliseconds. For seconds divide value with 1000. For hours divide value with 3600000.
connector.evidence.relayremmd.timeout.ms=3600000

connector.evidence.delivery.timeout.ms=3600000

connector.evidence.retrieval.timeout.ms=3600000

# Following properties define the connection to the database where message states should be logged.
# The dialect and driverClassName values depend on the dbms that is in use. Here some examples:
# Oracle:
connector.database.dialect=org.hibernate.dialect.Oracle10gDialect
connector.database.driverClassName=oracle.jdbc.driver.OracleDriver
connector.database.url=jdbc:oracle:thin:@sbmje1.brz.gv.at:1521/sitope.brz
#connector.database.username=sta_scheifia
#connector.database.password=sta_scheifia
connector.database.username=elias_scheifia
connector.database.password=elias_scheifia
# MySQL:
# connector.database.dialect=org.hibernate.dialect.MySQLDialect
# connector.database.driverClassName=com.mysql.jdbc.Driver
#connector.database.dialect=org.hibernate.dialect.MySQLDialect
#connector.database.driverClassName=com.mysql.jdbc.Driver
#connector.database.url=jdbc:mysql://quer.brz.gv.at:3306/riederb
#connector.database.username=riederb
#connector.database.password=riederb

java.keystore.path=${user.dir}/src/main/resources/keystore/evidenceBuilderStore.jks
java.keystore.password=123456
key.alias=evidenceBuilderKey
key.password=123456

hash.algorithm=MD5

http.proxy.enabled=true
http.proxy.host=172.30.9.12
http.proxy.port=8080
http.proxy.user=
http.proxy.password=

token.issuer.country=AT
token.issuer.service.provider=BRZ

postal.address.street=
postal.address.locality=
postal.address.postal.code=
postal.address.country=
